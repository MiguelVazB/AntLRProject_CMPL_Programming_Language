# Generated from CMPL.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,258,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,4,23,184,8,23,11,23,12,23,185,
        1,23,1,23,4,23,190,8,23,11,23,12,23,191,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,3,24,203,8,24,1,25,1,25,5,25,207,8,25,10,25,
        12,25,210,9,25,1,25,1,25,1,25,5,25,215,8,25,10,25,12,25,218,9,25,
        1,25,3,25,221,8,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,4,30,241,8,30,11,30,
        12,30,242,1,31,4,31,246,8,31,11,31,12,31,247,1,32,4,32,251,8,32,
        11,32,12,32,252,1,33,1,33,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,1,0,6,1,0,48,57,1,0,34,34,1,
        0,39,39,2,0,65,90,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,266,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,72,
        1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,0,0,0,13,
        85,1,0,0,0,15,87,1,0,0,0,17,89,1,0,0,0,19,95,1,0,0,0,21,97,1,0,0,
        0,23,104,1,0,0,0,25,115,1,0,0,0,27,123,1,0,0,0,29,131,1,0,0,0,31,
        148,1,0,0,0,33,165,1,0,0,0,35,169,1,0,0,0,37,172,1,0,0,0,39,174,
        1,0,0,0,41,176,1,0,0,0,43,178,1,0,0,0,45,180,1,0,0,0,47,183,1,0,
        0,0,49,202,1,0,0,0,51,220,1,0,0,0,53,222,1,0,0,0,55,227,1,0,0,0,
        57,233,1,0,0,0,59,236,1,0,0,0,61,240,1,0,0,0,63,245,1,0,0,0,65,250,
        1,0,0,0,67,254,1,0,0,0,69,70,5,105,0,0,70,71,5,102,0,0,71,2,1,0,
        0,0,72,73,5,101,0,0,73,74,5,108,0,0,74,75,5,115,0,0,75,76,5,101,
        0,0,76,4,1,0,0,0,77,78,5,123,0,0,78,6,1,0,0,0,79,80,5,125,0,0,80,
        8,1,0,0,0,81,82,5,61,0,0,82,10,1,0,0,0,83,84,5,40,0,0,84,12,1,0,
        0,0,85,86,5,44,0,0,86,14,1,0,0,0,87,88,5,41,0,0,88,16,1,0,0,0,89,
        90,5,115,0,0,90,91,5,104,0,0,91,92,5,111,0,0,92,93,5,119,0,0,93,
        94,5,40,0,0,94,18,1,0,0,0,95,96,5,33,0,0,96,20,1,0,0,0,97,98,5,101,
        0,0,98,99,5,113,0,0,99,100,5,117,0,0,100,101,5,97,0,0,101,102,5,
        108,0,0,102,103,5,115,0,0,103,22,1,0,0,0,104,105,5,110,0,0,105,106,
        5,111,0,0,106,107,5,116,0,0,107,108,5,32,0,0,108,109,5,101,0,0,109,
        110,5,113,0,0,110,111,5,117,0,0,111,112,5,97,0,0,112,113,5,108,0,
        0,113,114,5,115,0,0,114,24,1,0,0,0,115,116,5,103,0,0,116,117,5,114,
        0,0,117,118,5,101,0,0,118,119,5,97,0,0,119,120,5,116,0,0,120,121,
        5,101,0,0,121,122,5,114,0,0,122,26,1,0,0,0,123,124,5,115,0,0,124,
        125,5,109,0,0,125,126,5,97,0,0,126,127,5,108,0,0,127,128,5,108,0,
        0,128,129,5,101,0,0,129,130,5,114,0,0,130,28,1,0,0,0,131,132,5,103,
        0,0,132,133,5,114,0,0,133,134,5,101,0,0,134,135,5,97,0,0,135,136,
        5,116,0,0,136,137,5,101,0,0,137,138,5,114,0,0,138,139,5,32,0,0,139,
        140,5,111,0,0,140,141,5,114,0,0,141,142,5,32,0,0,142,143,5,101,0,
        0,143,144,5,113,0,0,144,145,5,117,0,0,145,146,5,97,0,0,146,147,5,
        108,0,0,147,30,1,0,0,0,148,149,5,115,0,0,149,150,5,109,0,0,150,151,
        5,97,0,0,151,152,5,108,0,0,152,153,5,108,0,0,153,154,5,101,0,0,154,
        155,5,114,0,0,155,156,5,32,0,0,156,157,5,111,0,0,157,158,5,114,0,
        0,158,159,5,32,0,0,159,160,5,101,0,0,160,161,5,113,0,0,161,162,5,
        117,0,0,162,163,5,97,0,0,163,164,5,108,0,0,164,32,1,0,0,0,165,166,
        5,97,0,0,166,167,5,110,0,0,167,168,5,100,0,0,168,34,1,0,0,0,169,
        170,5,111,0,0,170,171,5,114,0,0,171,36,1,0,0,0,172,173,5,43,0,0,
        173,38,1,0,0,0,174,175,5,45,0,0,175,40,1,0,0,0,176,177,5,42,0,0,
        177,42,1,0,0,0,178,179,5,47,0,0,179,44,1,0,0,0,180,181,5,94,0,0,
        181,46,1,0,0,0,182,184,7,0,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,
        183,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,189,5,46,0,0,188,
        190,7,0,0,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,191,
        192,1,0,0,0,192,48,1,0,0,0,193,194,5,116,0,0,194,195,5,114,0,0,195,
        196,5,117,0,0,196,203,5,101,0,0,197,198,5,102,0,0,198,199,5,97,0,
        0,199,200,5,108,0,0,200,201,5,115,0,0,201,203,5,101,0,0,202,193,
        1,0,0,0,202,197,1,0,0,0,203,50,1,0,0,0,204,208,5,34,0,0,205,207,
        8,1,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,
        1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,221,5,34,0,0,212,216,
        5,39,0,0,213,215,8,2,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,
        1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,221,
        5,39,0,0,220,204,1,0,0,0,220,212,1,0,0,0,221,52,1,0,0,0,222,223,
        5,110,0,0,223,224,5,117,0,0,224,225,5,108,0,0,225,226,5,108,0,0,
        226,54,1,0,0,0,227,228,5,119,0,0,228,229,5,104,0,0,229,230,5,105,
        0,0,230,231,5,108,0,0,231,232,5,101,0,0,232,56,1,0,0,0,233,234,5,
        43,0,0,234,235,5,43,0,0,235,58,1,0,0,0,236,237,5,45,0,0,237,238,
        5,45,0,0,238,60,1,0,0,0,239,241,7,3,0,0,240,239,1,0,0,0,241,242,
        1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,62,1,0,0,0,244,246,7,
        4,0,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,
        0,0,0,248,64,1,0,0,0,249,251,7,0,0,0,250,249,1,0,0,0,251,252,1,0,
        0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,66,1,0,0,0,254,255,7,5,0,
        0,255,256,1,0,0,0,256,257,6,33,0,0,257,68,1,0,0,0,10,0,185,191,202,
        208,216,220,242,247,252,1,0,1,0
    ]

class CMPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    OP_ADD = 19
    OP_SUB = 20
    OP_MUL = 21
    OP_DIV = 22
    OP_POW = 23
    FLOAT = 24
    BOOLEAN = 25
    STRING = 26
    NULL = 27
    WHILE = 28
    PLUS_PLUS = 29
    MINUS_MINUS = 30
    VAR = 31
    NEWLINE = 32
    INT = 33
    WS = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'{'", "'}'", "'='", "'('", "','", "')'", 
            "'show('", "'!'", "'equals'", "'not equals'", "'greater'", "'smaller'", 
            "'greater or equal'", "'smaller or equal'", "'and'", "'or'", 
            "'+'", "'-'", "'*'", "'/'", "'^'", "'null'", "'while'", "'++'", 
            "'--'" ]

    symbolicNames = [ "<INVALID>",
            "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_POW", "FLOAT", "BOOLEAN", 
            "STRING", "NULL", "WHILE", "PLUS_PLUS", "MINUS_MINUS", "VAR", 
            "NEWLINE", "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "OP_ADD", "OP_SUB", 
                  "OP_MUL", "OP_DIV", "OP_POW", "FLOAT", "BOOLEAN", "STRING", 
                  "NULL", "WHILE", "PLUS_PLUS", "MINUS_MINUS", "VAR", "NEWLINE", 
                  "INT", "WS" ]

    grammarFileName = "CMPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


